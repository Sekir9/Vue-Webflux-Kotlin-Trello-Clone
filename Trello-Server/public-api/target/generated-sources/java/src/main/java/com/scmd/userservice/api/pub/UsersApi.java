/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.scmd.userservice.api.pub;

import java.util.Set;
import com.scmd.userservice.model.pub.TransferUserDto;
import com.scmd.userservice.model.pub.UserDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-05-25T20:51:44.969410+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "users", description = "the users API")
public interface UsersApi {

    /**
     * POST /users : Return user
     *
     * @param transferUserDto User Data (required)
     * @return User was created (status code 201)
     *         or User Data is invalid (status code 400)
     */
    @Operation(
        operationId = "createUser",
        summary = "Return user",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "201", description = "User was created", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  TransferUserDto.class))),
            @ApiResponse(responseCode = "400", description = "User Data is invalid")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<TransferUserDto>> createUser(
        @Parameter(name = "TransferUserDto", description = "User Data", required = true, schema = @Schema(description = "")) @Valid @RequestBody Mono<TransferUserDto> transferUserDto,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"password\" : \"password22\", \"name\" : \"janowski\", \"email\" : \"janek@test.com\" }";
                result = ApiUtil.getExampleResponse(exchange, mediaType, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * DELETE /users/{userId}
     *
     * @param userId  (required)
     * @return User was deleted (status code 204)
     *         or User for given id was not found (status code 404)
     */
    @Operation(
        operationId = "deleteUser",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "204", description = "User was deleted"),
            @ApiResponse(responseCode = "404", description = "User for given id was not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{userId}"
    )
    default Mono<ResponseEntity<Void>> deleteUser(
        @Size(min = 36, max = 36) @Parameter(name = "userId", description = "", required = true, schema = @Schema(description = "")) @PathVariable("userId") String userId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /users/{userId}
     *
     * @param userId  (required)
     * @return User (status code 200)
     *         or User for given id was not found (status code 404)
     */
    @Operation(
        operationId = "getUser",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  UserDto.class))),
            @ApiResponse(responseCode = "404", description = "User for given id was not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<UserDto>> getUser(
        @Size(min = 36, max = 36) @Parameter(name = "userId", description = "", required = true, schema = @Schema(description = "")) @PathVariable("userId") String userId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"password\" : \"password2\", \"name\" : \"jnowak\", \"id\" : \"x139e9fc-8b46-11ec-a8a3-0242ac120337\", \"email\" : \"jnowak@test.com\" }";
                result = ApiUtil.getExampleResponse(exchange, mediaType, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /users : Return all users
     *
     * @param userIds  (optional)
     * @return Users (status code 200)
     */
    @Operation(
        operationId = "getUsers",
        summary = "Return all users",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Users", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  UserDto.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Flux<UserDto>>> getUsers(
        @Parameter(name = "userIds", description = "", schema = @Schema(description = "")) @Valid @RequestParam(value = "userIds", required = false) Optional<Set<String>> userIds,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"password\" : \"password2\", \"name\" : \"jnowak\", \"id\" : \"x139e9fc-8b46-11ec-a8a3-0242ac120337\", \"email\" : \"jnowak@test.com\" }";
                result = ApiUtil.getExampleResponse(exchange, mediaType, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * PUT /users/{userId}
     *
     * @param userId  (required)
     * @param transferUserDto User Data (required)
     * @return Updated User (status code 200)
     *         or User for given id was not found (status code 404)
     */
    @Operation(
        operationId = "updateUser",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated User", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  TransferUserDto.class))),
            @ApiResponse(responseCode = "404", description = "User for given id was not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{userId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<TransferUserDto>> updateUser(
        @Size(min = 36, max = 36) @Parameter(name = "userId", description = "", required = true, schema = @Schema(description = "")) @PathVariable("userId") String userId,
        @Parameter(name = "TransferUserDto", description = "User Data", required = true, schema = @Schema(description = "")) @Valid @RequestBody Mono<TransferUserDto> transferUserDto,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"password\" : \"password22\", \"name\" : \"janowski\", \"email\" : \"janek@test.com\" }";
                result = ApiUtil.getExampleResponse(exchange, mediaType, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }

}
